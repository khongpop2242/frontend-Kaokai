import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏î stock ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
async function testStockUpdate() {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏î stock...');
    
    // 1. ‡∏î‡∏π stock ‡∏Å‡πà‡∏≠‡∏ô
    console.log('\nüì¶ Stock ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:');
    const productsBefore = await prisma.product.findMany({
      select: { id: true, name: true, stock: true }
    });
    
    productsBefore.slice(0, 3).forEach(product => {
      console.log(`- ${product.name}: ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô`);
    });
    
    // 2. ‡∏•‡∏î stock ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const productId = 1; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const reduceQuantity = 1;
    
    const product = await prisma.product.findUnique({
      where: { id: productId }
    });
    
    if (product) {
      const newStock = product.stock - reduceQuantity;
      console.log(`\nüì¶ ‡∏•‡∏î stock: ${product.name} ‡∏à‡∏≤‡∏Å ${product.stock} ‡πÄ‡∏õ‡πá‡∏ô ${newStock}`);
      
      await prisma.product.update({
        where: { id: productId },
        data: { stock: newStock }
      });
      
      console.log('‚úÖ Stock ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    
    // 3. ‡∏î‡∏π stock ‡∏´‡∏•‡∏±‡∏á
    console.log('\nüì¶ Stock ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:');
    const productsAfter = await prisma.product.findMany({
      select: { id: true, name: true, stock: true }
    });
    
    productsAfter.slice(0, 3).forEach(product => {
      console.log(`- ${product.name}: ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô`);
    });
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testStockUpdate();
